<!-- The model Modal -->
<div class="modal" id="modelList">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">

      <div class="modal-header">
        <h4 class="modal-title">MODEL LIST:</h4>
        <button type="button" class="close" data-dismiss="modal">&times;</button>
      </div>

      <div class="modal-body row">
        <div class="col-xl-8 col-lg-8 col-md-8 col-sm-12 col-12">
          <form>
            <select id="select_brand_for_model" class="form-control" onclick="getModelsByBrand();"></select>
          </form>
          <hr/>
          <table class="table table-hover">
              <thead>
                <tr>
                  <th>Id</th>
                  <th>Title</th>
                  <th>Edit</th>
                  <th>Delete</th>
                </tr>
              </thead>
              <tbody id="model-table" class="list-models">
                <!-- list models -->
              </tbody>
          </table>
        </div>
        <div class="col-xl-4 col-lg-4 col-md-4 col-sm-12 col-12">
          <div id="edit-model-div"><!-- edit model form --></div>
        </div>
      </div>

    </div>
  </div>
</div>

<script type="text/javascript">

  $(document).ready(function() {

    /*************** load brands when modal opens ********************/
    // load brand when modal opens
    $('#modelList').on('show.bs.modal', function (e) {
      loadBrandsForModelList();
    });

    /*************** update model ********************/
    $(document).on("click", "#edit-model", function() {
      let get_id    = $(this).data('id');    // selected tables row id
      let get_brand = $(this).data('brand'); // selected tables row brand-id
      let get_title = $(this).data('title'); // selected tables row brand-title

      let edit_model_form = `
        <div class="card">
          <div class="card-body">
            <form id="update_model_form">
              <input type="hidden" name="update_model_id" id="update_model_id" value="${get_id}" />
              <input type="hidden" name="update_model_id" id="update_brand_id" value="${get_brand}" />
              <div class="form-group">
                <label for="select_brand_for_update_model">Select new brand</label>
                <select name="select_brand_for_update_model" id="select_brand_for_update_model" onclick="loadBrandsList();" class="form-control"></select>
              </div>
              <div class="form-group">
                <label for="update_title">Title</label>
                <input type="text" name="update_model_title" id="update_model_title" class="form-control" value="${get_title}" />
              </div>
              <button class="btn btn-primary">UPDATE</button>
            </form>
          </div>
          <div class="card-footer" id="update-model-error"></div>
        </div>
      `;

      var divPosition = $(this).parent().position();                // get top position of selected tables row
      $("#edit-model-div").css("margin-top", divPosition.top - 40); // set top position of update form to tables row 
      $("#edit-model-div").html(edit_model_form);                   // set update form to #edit-model-div

      $('#update_model_form').submit(function(e) {                 // submit update form
        e.preventDefault();
        let id        = $(this).find("#update_model_id").val();
        let new_brand = $(this).find("#select_brand_for_update_model").val();
        let old_brand = $(this).find("#update_brand_id").val();
        let title     = $(this).find("#update_model_title").val();

        if(new_brand === undefined || new_brand === "" || new_brand === null){
          updateModel(id, old_brand, title);  
        }else {
          updateModel(id, new_brand, title);
        }
      });
    });

  });

  //*************** update model /***************/
  async function updateModel(id, brand, title) {

    let result = await fetch(`${ ADDRESS }model/edit/${id}`, {
      method: "POST", 
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      },
      body: JSON.stringify({ 
        "brand": brand,
        "title": title 
      })
    })
    .then(result => result.json())
    .then(result => { return result; });
    
    if(result.success !== undefined && result.success != null && result.success !== ""){
      alert(result.success);
      location.reload();
    }
    if(result.errors !== undefined && result.errors != null && result.errors.length > 0) {
        let show_model_errors = result.errors.map((err) => { return `<p class="alert alert-danger">${err}</p>`; });
        $("#update-model-error").html(show_model_errors);
    }
  }

  /*************** get brands ***************/
  async function loadBrandsForModelList() {
    let result = await fetch(`${ ADDRESS }brand/get`, {
      method: "GET", 
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      }
    })
    .then(result => result.json())
    .then(result => { return result; }); 

    if(result.brands.length > 0){
      let getBrandList = result.brands.map((b) => {
        return `<option value="${b.id}">${b.title}</option>`;
      });
      $("#select_brand_for_model").html(getBrandList);
    }
  }

  /*************** get brands for update model form ***************/
  async function loadBrandsList(){
    let result = await fetch(`${ ADDRESS }brand/get`, {
      method: "GET", 
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      }
    })
    .then(result => result.json())
    .then(result => { return result; }); 

    if(result.brands.length > 0){
      let getBrandList = result.brands.map((b) => {
        return `<option value="${b.id}">${b.title}</option>`;
      });
      $("#select_brand_for_update_model").html(getBrandList);
    }  
  }

  /*************** get models by brand id ***************/
  async function getModelsByBrand(){
    let brand = $("#select_brand_for_model").val();
    let result = await fetch(`${ ADDRESS }model/get/${brand}`, {
      method: "GET", 
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      }
    })
    .then(result => result.json())
    .then(result => { return result; }); 

    if(result.models.length > 0){
      let listModels = result.models.map((m) => {
        return `<tr>
                  <td id="brand_id">${m.id}</td>
                  <td id="brand_title"><p>${m.title}</p></td>
                  <td>
                    <button class="btn btn-info" id="edit-model" data-id="${ m.id }" data-title="${ m.title }" data-brand="${ m.brand_id }" style="width: 100%;">Edit</button>
                  </td>
                  <td>
                    <button class="btn btn-danger" onclick="deleteModel(${ m.id })" style="width: 100%;">DELETE</button>
                  </td>                 
                </tr>`;
      });
      $(".list-models").html(listModels);
    }
  }

  /***** delete model by id *****/
  async function deleteModel(id){
    let result = await fetch(`${ ADDRESS }model/delete/${id}`, {
      method: "POST",
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      }    
    })
    .then(result => result.json())
    .then(result => { return result });

    if(result.success !== undefined && result.success != null && result.success !== ""){
      alert(result.success);
      location.reload();
    }
    if(result.errors !== undefined && result.errors != null && result.errors.length > 0) {
        let show_model_errors = result.errors.map((err) => { return `<p class="alert alert-danger">${err}</p>`; });
        $("#update-model-error").html(show_model_errors);
    }
  }

</script>